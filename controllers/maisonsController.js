const Maison = require('../models/Maison');
const User = require('../models/User');

// GET /maisons/:id - d√©taill√©e avec residents
const getMaisonById = async (req, res) => {
  try {
    const { id } = req.params;
    const maison = await Maison.findById(id)
      .populate('listeResidents')
      .populate('proprietaireId');
    if (!maison) {
      return res.status(404).json({ message: 'Maison non trouv√©e' });
    }
    res.json(maison);
  } catch (error) {
    console.error('üí• [API] getMaisonById error:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration de la maison' });
  }
};

// Cr√©er une maison
const createMaison = async (req, res) => {
  try {
    const { nomMaison, adresse, description, tarifKwh } = req.body;

    // V√©rifier que l'utilisateur est un propri√©taire
    if (req.user.role !== 'proprietaire') {
      return res.status(403).json({ message: 'Seuls les propri√©taires peuvent cr√©er des maisons' });
    }

    // Cr√©er la maison
    const maison = new Maison({
      nomMaison,
      proprietaireId: req.user._id,
      adresse,
      description,
      tarifKwh: tarifKwh !== undefined ? Number(tarifKwh) : undefined
    });

    await maison.save();

    res.status(201).json({
      message: 'Maison cr√©√©e avec succ√®s',
      maison
    });
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de la maison:', error);
    res.status(500).json({ message: 'Erreur lors de la cr√©ation de la maison' });
  }
};

// Obtenir les maisons d'un propri√©taire
const getMaisons = async (req, res) => {
  try {
    let maisons;

    if (req.user.role === 'proprietaire') {
      // Le propri√©taire voit toutes ses maisons
      maisons = await Maison.find({ proprietaireId: req.user._id })
        .populate('listeResidents', 'nom prenom email telephone')
        .sort({ createdAt: -1 });
    } else {
      // Le r√©sident voit les maisons o√π il habite
      maisons = await Maison.find({ listeResidents: req.user._id })
        .populate('proprietaireId', 'nom prenom email')
        .populate('listeResidents', 'nom prenom email telephone')
        .sort({ createdAt: -1 });
    }

    res.json({
      maisons,
      count: maisons.length
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des maisons:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des maisons' });
  }
};

// Obtenir une maison sp√©cifique
const getMaison = async (req, res) => {
  try {
    const { id } = req.params;

    let maison;
    if (req.user.role === 'proprietaire') {
      maison = await Maison.findOne({
        _id: id,
        proprietaireId: req.user._id
      }).populate('listeResidents', 'nom prenom email telephone');
    } else {
      maison = await Maison.findOne({
        _id: id,
        listeResidents: req.user._id
      }).populate('proprietaireId', 'nom prenom email')
        .populate('listeResidents', 'nom prenom email telephone');
    }

    if (!maison) {
      return res.status(404).json({ message: 'Maison non trouv√©e' });
    }

    res.json({ maison });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de la maison:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration de la maison' });
  }
};

// Mettre √† jour une maison
const updateMaison = async (req, res) => {
  try {
    const { id } = req.params;
    const { nomMaison, adresse, description } = req.body;

    // V√©rifier que l'utilisateur est un propri√©taire
    if (req.user.role !== 'proprietaire') {
      return res.status(403).json({ message: 'Seuls les propri√©taires peuvent modifier des maisons' });
    }

    // Trouver la maison
    const maison = await Maison.findOne({
      _id: id,
      proprietaireId: req.user._id
    });

    if (!maison) {
      return res.status(404).json({ message: 'Maison non trouv√©e' });
    }

    // Mettre √† jour les champs
    if (nomMaison) maison.nomMaison = nomMaison;
    if (adresse) maison.adresse = adresse;
    if (description !== undefined) maison.description = description;

    await maison.save();

    res.json({
      message: 'Maison mise √† jour avec succ√®s',
      maison
    });
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de la maison:', error);
    res.status(500).json({ message: 'Erreur lors de la mise √† jour de la maison' });
  }
};

// Supprimer une maison
const deleteMaison = async (req, res) => {
  try {
    const { id } = req.params;

    // V√©rifier que l'utilisateur est un propri√©taire
    if (req.user.role !== 'proprietaire') {
      return res.status(403).json({ message: 'Seuls les propri√©taires peuvent supprimer des maisons' });
    }

    // Trouver la maison
    const maison = await Maison.findOne({
      _id: id,
      proprietaireId: req.user._id
    });

    if (!maison) {
      return res.status(404).json({ message: 'Maison non trouv√©e' });
    }

    // V√©rifier qu'il n'y a pas de r√©sidents
    if (maison.listeResidents.length > 0) {
      return res.status(400).json({ 
        message: 'Impossible de supprimer une maison qui a des r√©sidents' 
      });
    }

    await Maison.findByIdAndDelete(id);

    res.json({ message: 'Maison supprim√©e avec succ√®s' });
  } catch (error) {
    console.error('Erreur lors de la suppression de la maison:', error);
    res.status(500).json({ message: 'Erreur lors de la suppression de la maison' });
  }
};

// Mettre √† jour le tarif d'une maison (propri√©taire uniquement)
const updateMaisonTarif = async (req, res) => {
  try {
    const { id } = req.params;
    const { tarifKwh } = req.body;

    if (req.user.role !== 'proprietaire') {
      return res.status(403).json({ message: 'Seuls les propri√©taires peuvent modifier le tarif' });
    }

    if (tarifKwh === undefined || Number.isNaN(Number(tarifKwh)) || Number(tarifKwh) < 0) {
      return res.status(400).json({ message: 'tarifKwh invalide' });
    }

    const maison = await Maison.findOne({ _id: id, proprietaireId: req.user._id });
    if (!maison) {
      return res.status(404).json({ message: 'Maison non trouv√©e' });
    }

    maison.tarifKwh = Number(tarifKwh);
    await maison.save();

    res.json({ message: 'Tarif mis √† jour avec succ√®s', maison: { _id: maison._id, tarifKwh: maison.tarifKwh } });
  } catch (error) {
    console.error('Erreur lors de la mise √† jour du tarif:', error);
    res.status(500).json({ message: 'Erreur lors de la mise √† jour du tarif' });
  }
};

// Ajouter un r√©sident √† une maison
const addResidentToMaison = async (req, res) => {
  try {
    const { maisonId, residentId } = req.body;

    // V√©rifier que l'utilisateur est un propri√©taire
    if (req.user.role !== 'proprietaire') {
      return res.status(403).json({ message: 'Seuls les propri√©taires peuvent ajouter des r√©sidents' });
    }

    // V√©rifier que la maison appartient au propri√©taire
    const maison = await Maison.findOne({
      _id: maisonId,
      proprietaireId: req.user._id
    });

    if (!maison) {
      return res.status(404).json({ message: 'Maison non trouv√©e' });
    }

    // V√©rifier que le r√©sident appartient au propri√©taire
    const resident = await User.findOne({
      _id: residentId,
      idProprietaire: req.user._id,
      role: 'resident'
    });

    if (!resident) {
      return res.status(404).json({ message: 'R√©sident non trouv√©' });
    }

    // Ajouter le r√©sident √† la maison
    await maison.ajouterResident(residentId);

    res.json({
      message: 'R√©sident ajout√© √† la maison avec succ√®s',
      maison
    });
  } catch (error) {
    console.error('Erreur lors de l\'ajout du r√©sident:', error);
    res.status(500).json({ message: 'Erreur lors de l\'ajout du r√©sident' });
  }
};

// Retirer un r√©sident d'une maison
const removeResidentFromMaison = async (req, res) => {
  try {
    const { maisonId, residentId } = req.body;

    // V√©rifier que l'utilisateur est un propri√©taire
    if (req.user.role !== 'proprietaire') {
      return res.status(403).json({ message: 'Seuls les propri√©taires peuvent retirer des r√©sidents' });
    }

    // V√©rifier que la maison appartient au propri√©taire
    const maison = await Maison.findOne({
      _id: maisonId,
      proprietaireId: req.user._id
    });

    if (!maison) {
      return res.status(404).json({ message: 'Maison non trouv√©e' });
    }

    // Retirer le r√©sident de la maison
    await maison.retirerResident(residentId);

    res.json({
      message: 'R√©sident retir√© de la maison avec succ√®s',
      maison
    });
  } catch (error) {
    console.error('Erreur lors du retrait du r√©sident:', error);
    res.status(500).json({ message: 'Erreur lors du retrait du r√©sident' });
  }
};

module.exports = {
  createMaison,
  getMaisons,
  getMaison,
  updateMaison,
  deleteMaison,
  addResidentToMaison,
  removeResidentFromMaison,
  updateMaisonTarif,
  getMaisonById
};
